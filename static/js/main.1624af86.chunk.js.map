{"version":3,"sources":["Common/Sider.js","Components/SafetyMeasures.js","Components/SelfDiagnosis.js","Components/Tracker.js","App.js","serviceWorker.js","index.js"],"names":["Sider","Layout","SiderDemo","theme","mode","defaultSelectedKeys","Item","key","to","React","Component","SafetyMeasures","id","autoplay","SelfDiagnosis","Tracker","App","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAGQA,EAAUC,IAAVD,MAqBOE,E,uKAjBX,OACE,kBAACF,EAAD,KACE,kBAAC,IAAD,CAAMG,MAAM,QAAQC,KAAK,SAASC,oBAAqB,CAAC,MACtD,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAASC,GAAG,KAAZ,mBAEF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAASC,GAAG,kBAAZ,kBAEF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAASC,GAAG,YAAZ,kB,GAZYC,IAAMC,W,iBC2BfC,E,uKA5BX,OACE,yBAAKC,GAAG,kBACN,kBAAC,IAAD,CAAUC,UAAQ,GAChB,6BACE,kEAEF,6BACE,sDAEF,6BACE,oDAEF,6BACE,oDAGF,6BACE,yDAGF,6BACE,2D,GAvBiBJ,IAAMC,WCKpBI,E,uKAHX,OAAO,mD,GAFiBL,IAAMC,WCKnBK,E,uKAHX,OAAO,0D,GAFWN,IAAMC,WCuBbM,MAhBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,iBAAiBC,UAAWN,IACxC,kBAAC,IAAD,CAAOK,KAAK,WAAWC,UAAWL,IAClC,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,kBAAkBC,UAAWT,QCNrCU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1624af86.chunk.js","sourcesContent":["import { Layout, Menu } from \"antd\";\nimport React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nconst { Sider } = Layout;\n\nclass SiderDemo extends React.Component {\n  render() {\n    return (\n      <Sider>\n        <Menu theme=\"light\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\n          <Menu.Item key=\"1\">\n            <NavLink to=\"/\">SafetyMeasures</NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"2\">\n            <NavLink to=\"/SelfDiagnosis\">SelfDiagnosis</NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"3\">\n            <NavLink to=\"/Tracker\">Tracker</NavLink>\n          </Menu.Item>\n        </Menu>\n      </Sider>\n    );\n  }\n}\nexport default SiderDemo;\n// ReactDOM.render(<SiderDemo />, mountNode);\n","import React from \"react\";\nimport { Carousel } from \"antd\";\nclass SafetyMeasures extends React.Component {\n  render() {\n    return (\n      <div id=\"safetyMeasures\">\n        <Carousel autoplay>\n          <div>\n            <h1>DO THE FIVE Help stop coronavirus</h1>\n          </div>\n          <div>\n            <h2>HANDS Wash them often</h2>\n          </div>\n          <div>\n            <h2>ELBOW Cough into it</h2>\n          </div>\n          <div>\n            <h2>FACE Don't touch it</h2>\n          </div>\n\n          <div>\n            <h2>SPACE Keep safe distance</h2>\n          </div>\n\n          <div>\n            <h2>HOME Stay if you can</h2>\n          </div>\n        </Carousel>\n      </div>\n    );\n  }\n}\nexport default SafetyMeasures;\n// ReactDOM.render(<SiderDemo />, mountNode);\n","import React from \"react\";\n\nclass SelfDiagnosis extends React.Component {\n  render() {\n    return <span>SelfDiagnosis</span>;\n  }\n}\nexport default SelfDiagnosis;\n// ReactDOM.render(<SiderDemo />, mountNode);\n","import React from \"react\";\n\nclass Tracker extends React.Component {\n  render() {\n    return <span>This is Tracker Page</span>;\n  }\n}\nexport default Tracker;\n// ReactDOM.render(<SiderDemo />, mountNode);\n","import React from \"react\";\nimport \"./App.css\";\nimport SiderDemo from \"./Common/Sider\";\nimport { Route, Switch } from \"react-router-dom\";\nimport SafetyMeasures from \"./Components/SafetyMeasures\";\nimport SelfDiagnosis from \"./Components/SelfDiagnosis\";\nimport Tracker from \"./Components/Tracker\";\nimport { Layout } from \"antd\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <SiderDemo></SiderDemo>\n        <Switch>\n          <Route exact path=\"/\" component={SafetyMeasures} />\n          <Route path=\"/SelfDiagnosis\" component={SelfDiagnosis} />\n          <Route path=\"/Tracker\" component={Tracker} />\n          <Route exact path=\"/SafetyMeasures\" component={SafetyMeasures} />\n        </Switch>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}